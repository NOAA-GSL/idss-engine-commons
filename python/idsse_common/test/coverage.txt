============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.1.1, pluggy-1.4.0
rootdir: /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common
plugins: cov-4.1.0
collected 214 items

test/sci/test_geo_image.py .....................                         [  9%]
test/sci/test_grid_proj.py .......................                       [ 20%]
test/sci/test_netcdf_io.py ....                                          [ 22%]
test/sci/test_vectaster.py .............                                 [ 28%]
test/test_aws_utils.py ..................                                [ 36%]
test/test_config.py ............                                         [ 42%]
test/test_json_message.py ...........                                    [ 47%]
test/test_log_util.py ...F.                                              [ 50%]
test/test_path_builder.py ......................                         [ 60%]
test/test_publish_confirm.py .........                                   [ 64%]
test/test_rabbitmq_utils.py ......                                       [ 67%]
test/test_utils.py ...........................                           [ 79%]
test/test_validate_criteria_schema.py ......                             [ 82%]
test/test_validate_das_schema.py ..............                          [ 89%]
test/test_validate_das_web_schema.py .........                           [ 93%]
test/test_validate_event_port_schema.py .....                            [ 95%]
test/test_validate_new_data_schema.py .........                          [100%]

=================================== FAILURES ===================================
___________________ test_get_default_log_config_with_corr_id ___________________

self = <logging.config.DictConfigurator object at 0x7f77d6788390>
s = 'python_logging_rabbitmq.RabbitMQHandler'

    def resolve(self, s):
        """
        Resolve strings to objects using standard import and attribute
        syntax.
        """
        name = s.split('.')
        used = name.pop(0)
        try:
>           found = self.importer(used)
E           ModuleNotFoundError: No module named 'python_logging_rabbitmq'

/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:396: ModuleNotFoundError

The above exception was the direct cause of the following exception:

self = <logging.config.DictConfigurator object at 0x7f77d6788390>

    def configure(self):
        """Do the configuration."""
    
        config = self.config
        if 'version' not in config:
            raise ValueError("dictionary doesn't specify a version")
        if config['version'] != 1:
            raise ValueError("Unsupported version: %s" % config['version'])
        incremental = config.pop('incremental', False)
        EMPTY_DICT = {}
        logging._acquireLock()
        try:
            if incremental:
                handlers = config.get('handlers', EMPTY_DICT)
                for name in handlers:
                    if name not in logging._handlers:
                        raise ValueError('No handler found with '
                                         'name %r'  % name)
                    else:
                        try:
                            handler = logging._handlers[name]
                            handler_config = handlers[name]
                            level = handler_config.get('level', None)
                            if level:
                                handler.setLevel(logging._checkLevel(level))
                        except Exception as e:
                            raise ValueError('Unable to configure handler '
                                             '%r' % name) from e
                loggers = config.get('loggers', EMPTY_DICT)
                for name in loggers:
                    try:
                        self.configure_logger(name, loggers[name], True)
                    except Exception as e:
                        raise ValueError('Unable to configure logger '
                                         '%r' % name) from e
                root = config.get('root', None)
                if root:
                    try:
                        self.configure_root(root, True)
                    except Exception as e:
                        raise ValueError('Unable to configure root '
                                         'logger') from e
            else:
                disable_existing = config.pop('disable_existing_loggers', True)
    
                _clearExistingHandlers()
    
                # Do formatters first - they don't refer to anything else
                formatters = config.get('formatters', EMPTY_DICT)
                for name in formatters:
                    try:
                        formatters[name] = self.configure_formatter(
                                                            formatters[name])
                    except Exception as e:
                        raise ValueError('Unable to configure '
                                         'formatter %r' % name) from e
                # Next, do filters - they don't refer to anything else, either
                filters = config.get('filters', EMPTY_DICT)
                for name in filters:
                    try:
                        filters[name] = self.configure_filter(filters[name])
                    except Exception as e:
                        raise ValueError('Unable to configure '
                                         'filter %r' % name) from e
    
                # Next, do handlers - they refer to formatters and filters
                # As handlers can refer to other handlers, sort the keys
                # to allow a deterministic order of configuration
                handlers = config.get('handlers', EMPTY_DICT)
                deferred = []
                for name in sorted(handlers):
                    try:
>                       handler = self.configure_handler(handlers[name])

/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:573: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:735: in configure_handler
    klass = self.resolve(cname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <logging.config.DictConfigurator object at 0x7f77d6788390>
s = 'python_logging_rabbitmq.RabbitMQHandler'

    def resolve(self, s):
        """
        Resolve strings to objects using standard import and attribute
        syntax.
        """
        name = s.split('.')
        used = name.pop(0)
        try:
            found = self.importer(used)
            for frag in name:
                used += '.' + frag
                try:
                    found = getattr(found, frag)
                except AttributeError:
                    self.importer(used)
                    found = getattr(found, frag)
            return found
        except ImportError as e:
            v = ValueError('Cannot resolve %r: %s' % (s, e))
>           raise v from e
E           ValueError: Cannot resolve 'python_logging_rabbitmq.RabbitMQHandler': No module named 'python_logging_rabbitmq'

/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:407: ValueError

The above exception was the direct cause of the following exception:

capsys = <_pytest.capture.CaptureFixture object at 0x7f77d6788bd0>

    def test_get_default_log_config_with_corr_id(capsys):
>       logging.config.dictConfig(get_default_log_config('INFO'))

test/test_log_util.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:823: in dictConfig
    dictConfigClass(config).configure()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <logging.config.DictConfigurator object at 0x7f77d6788390>

    def configure(self):
        """Do the configuration."""
    
        config = self.config
        if 'version' not in config:
            raise ValueError("dictionary doesn't specify a version")
        if config['version'] != 1:
            raise ValueError("Unsupported version: %s" % config['version'])
        incremental = config.pop('incremental', False)
        EMPTY_DICT = {}
        logging._acquireLock()
        try:
            if incremental:
                handlers = config.get('handlers', EMPTY_DICT)
                for name in handlers:
                    if name not in logging._handlers:
                        raise ValueError('No handler found with '
                                         'name %r'  % name)
                    else:
                        try:
                            handler = logging._handlers[name]
                            handler_config = handlers[name]
                            level = handler_config.get('level', None)
                            if level:
                                handler.setLevel(logging._checkLevel(level))
                        except Exception as e:
                            raise ValueError('Unable to configure handler '
                                             '%r' % name) from e
                loggers = config.get('loggers', EMPTY_DICT)
                for name in loggers:
                    try:
                        self.configure_logger(name, loggers[name], True)
                    except Exception as e:
                        raise ValueError('Unable to configure logger '
                                         '%r' % name) from e
                root = config.get('root', None)
                if root:
                    try:
                        self.configure_root(root, True)
                    except Exception as e:
                        raise ValueError('Unable to configure root '
                                         'logger') from e
            else:
                disable_existing = config.pop('disable_existing_loggers', True)
    
                _clearExistingHandlers()
    
                # Do formatters first - they don't refer to anything else
                formatters = config.get('formatters', EMPTY_DICT)
                for name in formatters:
                    try:
                        formatters[name] = self.configure_formatter(
                                                            formatters[name])
                    except Exception as e:
                        raise ValueError('Unable to configure '
                                         'formatter %r' % name) from e
                # Next, do filters - they don't refer to anything else, either
                filters = config.get('filters', EMPTY_DICT)
                for name in filters:
                    try:
                        filters[name] = self.configure_filter(filters[name])
                    except Exception as e:
                        raise ValueError('Unable to configure '
                                         'filter %r' % name) from e
    
                # Next, do handlers - they refer to formatters and filters
                # As handlers can refer to other handlers, sort the keys
                # to allow a deterministic order of configuration
                handlers = config.get('handlers', EMPTY_DICT)
                deferred = []
                for name in sorted(handlers):
                    try:
                        handler = self.configure_handler(handlers[name])
                        handler.name = name
                        handlers[name] = handler
                    except Exception as e:
                        if 'target not configured yet' in str(e.__cause__):
                            deferred.append(name)
                        else:
>                           raise ValueError('Unable to configure handler '
                                             '%r' % name) from e
E                                            ValueError: Unable to configure handler 'rabbit'

/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/logging/config.py:580: ValueError
- generated xml file: /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/test/pytest.xml -

---------- coverage: platform linux, python 3.11.9-final-0 -----------
Name                              Stmts   Miss  Cover
-----------------------------------------------------
idsse/common/__init__.py              0      0   100%
idsse/common/aws_utils.py            86      5    94%
idsse/common/config.py               68      8    88%
idsse/common/json_message.py         23      1    96%
idsse/common/log_util.py             43      3    93%
idsse/common/path_builder.py        128     10    92%
idsse/common/publish_confirm.py     151     13    91%
idsse/common/rabbitmq_utils.py       62      0   100%
idsse/common/sci/__init__.py          0      0   100%
idsse/common/sci/geo_image.py       219     14    94%
idsse/common/sci/grid_proj.py        94      1    99%
idsse/common/sci/netcdf_io.py        47      0   100%
idsse/common/sci/utils.py             9      0   100%
idsse/common/sci/vectaster.py       180     30    83%
idsse/common/utils.py               121     10    92%
idsse/common/validate_schema.py      41      0   100%
-----------------------------------------------------
TOTAL                              1272     95    93%

=========================== short test summary info ============================
FAILED test/test_log_util.py::test_get_default_log_config_with_corr_id - ValueError: Unable to configure handler 'rabbit'
======================== 1 failed, 213 passed in 5.03s =========================
