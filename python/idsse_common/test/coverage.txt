============================= test session starts ==============================
platform linux -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common
plugins: cov-4.1.0
collected 66 items

test_aws_utils.py ..........FFFFF                                        [ 22%]
test_config.py ............                                              [ 40%]
test_path_builder.py ...........FFFFF...FF                               [ 72%]
test_utils.py ..........                                                 [ 87%]
test_validate_schema.py ........                                         [100%]

=================================== FAILURES ===================================
_______________________________ test_get_issues ________________________________

aws_utils = <idsse.common.aws_utils.AwsUtils object at 0x7f2926d00050>
mock_exec_cmd = <Mock id='139814721557392'>

    def test_get_issues(aws_utils: AwsUtils, mock_exec_cmd):
>       result = aws_utils.get_issues(
            issue_start=EXAMPLE_ISSUE, issue_end=EXAMPLE_VALID, num_issues=2)

test_aws_utils.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:139: in get_issues
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/aws_utils.py:139: in <setcomp>
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 14, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
______ test_get_issues_returns_latest_issue_from_today_if_no_args_passed _______

aws_utils = <idsse.common.aws_utils.AwsUtils object at 0x7f2926b7a4d0>
mock_exec_cmd = <Mock id='139814719956368'>

    def test_get_issues_returns_latest_issue_from_today_if_no_args_passed(aws_utils: AwsUtils, mock_exec_cmd):
>       result = aws_utils.get_issues()

test_aws_utils.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:139: in get_issues
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/aws_utils.py:139: in <setcomp>
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 15, 'issue.hour': 21, 'issue.month': 8, 'issue.year': 2023}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
_____________________________ test_get_valids_all ______________________________

aws_utils = <idsse.common.aws_utils.AwsUtils object at 0x7f2926bf4c10>
mock_exec_cmd = <Mock id='139814720458640'>

    def test_get_valids_all(aws_utils: AwsUtils, mock_exec_cmd):
>       result = aws_utils.get_valids(EXAMPLE_ISSUE)

test_aws_utils.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in <listcomp>
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
______________________ test_get_valids_with_start_filter _______________________

aws_utils = <idsse.common.aws_utils.AwsUtils object at 0x7f2926b50250>
mock_exec_cmd = <Mock id='139814719797392'>

    def test_get_valids_with_start_filter(aws_utils: AwsUtils, mock_exec_cmd):
        valid_start = EXAMPLE_VALID + timedelta(hours=1)
>       result = aws_utils.get_valids(EXAMPLE_ISSUE, valid_start=valid_start)

test_aws_utils.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in <listcomp>
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
___________________ test_get_valids_with_start_and_end_filer ___________________

aws_utils = <idsse.common.aws_utils.AwsUtils object at 0x7f2926be4b10>
mock_exec_cmd = <Mock id='139814720392720'>

    def test_get_valids_with_start_and_end_filer(aws_utils: AwsUtils, mock_exec_cmd):
        valid_start = EXAMPLE_VALID - timedelta(hours=1)
        valid_end = EXAMPLE_VALID
>       result = aws_utils.get_valids(EXAMPLE_ISSUE, valid_start=valid_start, valid_end=valid_end)

test_aws_utils.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in <listcomp>
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
_____________________________ test_parse_filename ______________________________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_parse_filename(path_builder: PathBuilder):
>       result_dict = path_builder.parse_filename(EXAMPLE_FULL_PATH)

test_path_builder.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:191: in parse_filename
    return self._parse_times(filename, self.filename_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}', value = '', result = {}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
________________________________ test_get_issue ________________________________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_issue(path_builder: PathBuilder):
>       actual_issue: datetime = path_builder.get_issue(EXAMPLE_FULL_PATH)

test_path_builder.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
______________________ test_get_valid_from_issue_and_lead ______________________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_from_issue_and_lead(path_builder: PathBuilder):
        # verify valid timestamp gets successfully constructed based on issue and lead embedded into path
>       result_valid: datetime = path_builder.get_valid(EXAMPLE_FULL_PATH)

test_path_builder.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
____________ test_get_valid_returns_none_when_issue_or_lead_failed _____________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_returns_none_when_issue_or_lead_failed(path_builder: PathBuilder):
        path_with_invalid_lead = '~/blend.19701003/12/core/blend.t12z.core.f000.co.grib2.idx'
>       result_valid = path_builder.get_valid(path_with_invalid_lead)

test_path_builder.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f000.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
________________________ test_get_issue_from_time_args _________________________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_issue_from_time_args(path_builder: PathBuilder):
>       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
____________ test_get_valid_from_time_args_calculates_based_on_lead ____________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_from_time_args_calculates_based_on_lead(path_builder: PathBuilder):
>       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
_________________________ test_get_lead_from_time_args _________________________

path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_lead_from_time_args(path_builder: PathBuilder):
>       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
>           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError
=============================== warnings summary ===============================
../idsse/common/validate_schema.py:15
../idsse/common/validate_schema.py:15
  /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/validate_schema.py:15: DeprecationWarning: Importing Validator directly from the jsonschema package is deprecated and will become an ImportError. Import it from jsonschema.protocols instead.
    from jsonschema import Validator, FormatChecker, RefResolver

../idsse/common/validate_schema.py:15
../idsse/common/validate_schema.py:15
  /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/validate_schema.py:15: DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.
    from jsonschema import Validator, FormatChecker, RefResolver

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
- generated xml file: /home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/test/pytest.xml -

---------- coverage: platform linux, python 3.11.4-final-0 -----------
Name                                                                                                            Stmts   Miss  Cover
-----------------------------------------------------------------------------------------------------------------------------------
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/__init__.py              0      0   100%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/aws_utils.py            78     15    81%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/config.py               74      9    88%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/json_message.py         22     22     0%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/log_util.py             38     38     0%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/path_builder.py        148     44    70%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/publish_confirm.py     141    141     0%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/utils.py                78     33    58%
/home/runner/work/idss-engine-commons/idss-engine-commons/python/idsse_common/idsse/common/validate_schema.py      42      0   100%
-----------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                             621    302    51%

=========================== short test summary info ============================
FAILED test_aws_utils.py::test_get_issues - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_aws_utils.py::test_get_issues_returns_latest_issue_from_today_if_no_args_passed - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_aws_utils.py::test_get_valids_all - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_aws_utils.py::test_get_valids_with_start_filter - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_aws_utils.py::test_get_valids_with_start_and_end_filer - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_parse_filename - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_issue - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_valid_from_issue_and_lead - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_valid_returns_none_when_issue_or_lead_failed - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_issue_from_time_args - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_valid_from_time_args_calculates_based_on_lead - ValueError: invalid literal for int() with base 10: '02d}z.core'
FAILED test_path_builder.py::test_get_lead_from_time_args - ValueError: invalid literal for int() with base 10: '02d}z.core'
================== 12 failed, 54 passed, 4 warnings in 1.10s ===================
