<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="12" skipped="0" tests="66" time="1.351" timestamp="2023-08-16T17:38:23.190483" hostname="fv-az306-336"><testcase classname="test.test_aws_utils" name="test_get_path" time="0.003" /><testcase classname="test.test_aws_utils" name="test_aws_ls" time="0.002" /><testcase classname="test.test_aws_utils" name="test_aws_ls_without_prepend_path" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_returns_empty_array_on_error" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_succeeds" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_fails" time="0.001" /><testcase classname="test.test_aws_utils" name="test_check_for_succeeds" time="0.002" /><testcase classname="test.test_aws_utils" name="test_check_for_does_not_find_valid" time="0.002" /><testcase classname="test.test_aws_utils" name="test_get_issues" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">aws_utils = &lt;idsse.common.aws_utils.AwsUtils object at 0x7f27bcf53010&gt;
mock_exec_cmd = &lt;Mock id='139808648679056'&gt;

    def test_get_issues(aws_utils: AwsUtils, mock_exec_cmd):
&gt;       result = aws_utils.get_issues(
            issue_start=EXAMPLE_ISSUE, issue_end=EXAMPLE_VALID, num_issues=2)

test_aws_utils.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:139: in get_issues
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/aws_utils.py:139: in &lt;setcomp&gt;
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 14, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_aws_utils" name="test_get_issues_returns_latest_issue_from_today_if_no_args_passed" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">aws_utils = &lt;idsse.common.aws_utils.AwsUtils object at 0x7f27bcde1e90&gt;
mock_exec_cmd = &lt;Mock id='139808649126032'&gt;

    def test_get_issues_returns_latest_issue_from_today_if_no_args_passed(aws_utils: AwsUtils, mock_exec_cmd):
&gt;       result = aws_utils.get_issues()

test_aws_utils.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:139: in get_issues
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/aws_utils.py:139: in &lt;setcomp&gt;
    issue_set = {self.path_builder.get_issue(file_path)
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 16, 'issue.hour': 17, 'issue.month': 8, 'issue.year': 2023}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_aws_utils" name="test_get_valids_all" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">aws_utils = &lt;idsse.common.aws_utils.AwsUtils object at 0x7f27bce5ccd0&gt;
mock_exec_cmd = &lt;Mock id='139808649628624'&gt;

    def test_get_valids_all(aws_utils: AwsUtils, mock_exec_cmd):
&gt;       result = aws_utils.get_valids(EXAMPLE_ISSUE)

test_aws_utils.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in &lt;listcomp&gt;
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_filter" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">aws_utils = &lt;idsse.common.aws_utils.AwsUtils object at 0x7f27bcd77a90&gt;
mock_exec_cmd = &lt;Mock id='139808648685520'&gt;

    def test_get_valids_with_start_filter(aws_utils: AwsUtils, mock_exec_cmd):
        valid_start = EXAMPLE_VALID + timedelta(hours=1)
&gt;       result = aws_utils.get_valids(EXAMPLE_ISSUE, valid_start=valid_start)

test_aws_utils.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in &lt;listcomp&gt;
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_and_end_filer" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">aws_utils = &lt;idsse.common.aws_utils.AwsUtils object at 0x7f27bcdc0750&gt;
mock_exec_cmd = &lt;Mock id='139808648989456'&gt;

    def test_get_valids_with_start_and_end_filer(aws_utils: AwsUtils, mock_exec_cmd):
        valid_start = EXAMPLE_VALID - timedelta(hours=1)
        valid_end = EXAMPLE_VALID
&gt;       result = aws_utils.get_valids(EXAMPLE_ISSUE, valid_start=valid_start, valid_end=valid_end)

test_aws_utils.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/aws_utils.py:173: in get_valids
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/aws_utils.py:173: in &lt;listcomp&gt;
    valid_file = [(self.path_builder.get_valid(file_path), file_path)
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_config" name="test_load_from_dict_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_as_string_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_with_name_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_require_string_key" time="0.003" /><testcase classname="test.test_config" name="test_load_from_dict_require_list_key" time="0.001" /><testcase classname="test.test_config" name="test_load_with_missing_attribute_should_fail" time="0.001" /><testcase classname="test.test_config" name="test_config_str_with_no_files_raises_error" time="0.002" /><testcase classname="test.test_config" name="test_config_list_of_dicts_succeeds" time="0.004" /><testcase classname="test.test_config" name="test_load_with_ignore_missing_attribute" time="0.001" /><testcase classname="test.test_config" name="test_load_from_file" time="0.007" /><testcase classname="test.test_config" name="test_load_from_files_with_out_key" time="0.013" /><testcase classname="test.test_config" name="test_load_from_files_with_key" time="0.015" /><testcase classname="test.test_path_builder" name="test_from_dir_filename_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_from_path_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_dir_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_filename_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_file_ext" time="0.001" /><testcase classname="test.test_path_builder" name="test_path_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_gets_issue_valid_and_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_fails_without_issue" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_filename" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_path" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_dir" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_filename" time="0.005"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_parse_filename(path_builder: PathBuilder):
&gt;       result_dict = path_builder.parse_filename(EXAMPLE_FULL_PATH)

test_path_builder.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:191: in parse_filename
    return self._parse_times(filename, self.filename_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}', value = '', result = {}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_issue" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_issue(path_builder: PathBuilder):
&gt;       actual_issue: datetime = path_builder.get_issue(EXAMPLE_FULL_PATH)

test_path_builder.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:214: in get_issue
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_valid_from_issue_and_lead" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_from_issue_and_lead(path_builder: PathBuilder):
        # verify valid timestamp gets successfully constructed based on issue and lead embedded into path
&gt;       result_valid: datetime = path_builder.get_valid(EXAMPLE_FULL_PATH)

test_path_builder.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_when_issue_or_lead_failed" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_returns_none_when_issue_or_lead_failed(path_builder: PathBuilder):
        path_with_invalid_lead = '~/blend.19701003/12/core/blend.t12z.core.f000.co.grib2.idx'
&gt;       result_valid = path_builder.get_valid(path_with_invalid_lead)

test_path_builder.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:226: in get_valid
    time_args = self.parse_path(path)
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f000.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_issue_from_time_args" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_issue_from_time_args(path_builder: PathBuilder):
&gt;       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_issue_returns_none_if_args_empty" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_if_args_empty" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args_calculates_based_on_lead" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_valid_from_time_args_calculates_based_on_lead(path_builder: PathBuilder):
&gt;       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_path_builder" name="test_get_lead_from_time_args" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: '02d}z.core'">path_builder = PathBuilder(basedir='~', subdir='blend.{issue.year:04d}{issue.month:02d}{issue.day:02d}/{issue.hour:02d}/core/', file_base='blend.t{issue.hour:02d}z.core.f{lead.hour:03d}.co', file_ext='grib2.idx')

    def test_get_lead_from_time_args(path_builder: PathBuilder):
&gt;       parsed_dict = path_builder.parse_path(EXAMPLE_FULL_PATH)

test_path_builder.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../idsse/common/path_builder.py:203: in parse_path
    return self._parse_times(path, self.path_fmt)
../idsse/common/path_builder.py:351: in _parse_times
    parse_args(res.group(), vals[i][res.span()[0]:], time_args)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = '{issue.hour:02d}z.core.f{lead.hour:03d}'
value = '12z.core.f002.co.grib2.idx'
result = {'issue.day': 3, 'issue.hour': 12, 'issue.month': 10, 'issue.year': 1970}

    def parse_args(key: str, value: str, result: Dict):
        for arg in key.split('{')[1:]:
            var_name, var_size = arg.split(':')
            var_type = var_size[-2:-1]
&gt;           var_size = int(var_size[:-2])
E           ValueError: invalid literal for int() with base 10: '02d}z.core'

../idsse/common/path_builder.py:333: ValueError</failure></testcase><testcase classname="test.test_utils" name="test_timedelta_minute" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_hour" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_day" time="0.001" /><testcase classname="test.test_utils" name="test_to_iso" time="0.001" /><testcase classname="test.test_utils" name="test_to_compact" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[Everyone is equal-1346529203]" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[You are awesome--1357061130]" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_forward" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_backwards" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_bound" time="0.001" /><testcase classname="test.test_validate_schema" name="test_validate_das_valid_request" time="0.011" /><testcase classname="test.test_validate_schema" name="test_validate_das_data_request" time="0.006" /><testcase classname="test.test_validate_schema" name="test_validate_das_unit_request" time="0.012" /><testcase classname="test.test_validate_schema" name="test_validate_das_criteria_request" time="0.016" /><testcase classname="test.test_validate_schema" name="test_validate_das_criteria_join_request" time="0.025" /><testcase classname="test.test_validate_schema" name="test_validate_good_criteria_message" time="0.016" /><testcase classname="test.test_validate_schema" name="test_validate_bad_criteria_message" time="0.011" /><testcase classname="test.test_validate_schema" name="test_validate_good_new_data_message" time="0.005" /></testsuite></testsuites>