<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="212" time="4.890" timestamp="2024-01-22T22:46:20.849157" hostname="fv-az984-891"><testcase classname="test.test_aws_utils" name="test_get_path" time="0.002" /><testcase classname="test.test_aws_utils" name="test_aws_ls" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_without_prepend_path" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_returns_empty_array_on_error" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_succeeds" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_fails" time="0.001" /><testcase classname="test.test_aws_utils" name="test_check_for_succeeds" time="0.001" /><testcase classname="test.test_aws_utils" name="test_check_for_does_not_find_valid" time="0.002" /><testcase classname="test.test_aws_utils" name="test_get_issues" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_issues_with_same_start_stop" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_issues_latest_issue_from_today_if_no_args_passed" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_all" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_filter" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_and_end_filer" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_same_start_end_filer" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_wildcards" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_as_string_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_with_name_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_require_string_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_require_list_key" time="0.001" /><testcase classname="test.test_config" name="test_load_with_missing_attribute_should_fail" time="0.001" /><testcase classname="test.test_config" name="test_config_str_with_no_files_raises_error" time="0.001" /><testcase classname="test.test_config" name="test_config_list_of_dicts_succeeds" time="0.001" /><testcase classname="test.test_config" name="test_load_with_ignore_missing_attribute" time="0.001" /><testcase classname="test.test_config" name="test_load_from_file" time="0.004" /><testcase classname="test.test_config" name="test_load_from_files_with_out_key" time="0.007" /><testcase classname="test.test_config" name="test_load_from_files_with_key" time="0.008" /><testcase classname="test.test_geo_image" name="test_geo_image_from_data_grid" time="0.012" /><testcase classname="test.test_geo_image" name="test_geo_image_from_data_grid_with_scale" time="0.004" /><testcase classname="test.test_geo_image" name="test_set_pixel" time="0.003" /><testcase classname="test.test_geo_image" name="test_outline_pixel" time="0.003" /><testcase classname="test.test_geo_image" name="test_draw_point" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_line_seg" time="0.016" /><testcase classname="test.test_geo_image" name="test_draw_polygon" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_multi_polygon" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_geo_polygon" time="0.005"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 2 / 2 (100%)&#10;Max absolute difference: 3&#10;Max relative difference: 0.02678571&#10; x: array([7385,  115])&#10; y: array([7388,  112])">proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f0ae7a0c210&gt;

    def test_draw_geo_polygon(proj):
        scale = 10
        width, height = 5, 5
        data = numpy.zeros((height, width))
        geo_image = GeoImage.from_data_grid(proj, data, scale=scale)
    
        lon_lat_1 = proj.map_pixel_to_geo(1.3, 1.9)
        lon_lat_2 = proj.map_pixel_to_geo(3.5, 2.7)
        lon_lat_3 = proj.map_pixel_to_geo(3.0, 1.5)
        poly_wkt = (f'POLYGON(({lon_lat_1[0]} {lon_lat_1[1]}, {lon_lat_2[0]} {lon_lat_2[1]}, '
                    f'{lon_lat_3[0]} {lon_lat_3[1]}, {lon_lat_1[0]} {lon_lat_1[1]}))')
    
        geo_image.draw_shape(poly_wkt, (0, 0, 100))
    
        values, indices, counts = numpy.unique(geo_image.rgb_array,
                                               return_inverse=True,
                                               return_counts=True)
    
        # values will be 0 or 100 (for polygon) and 0 everywhere else
        numpy.testing.assert_array_equal(values, [0, 100])
&gt;       numpy.testing.assert_array_equal(counts, [7388, 112])

test/test_geo_image.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, array([7385,  115]), [7388, 112])
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 2 / 2 (100%)
E           Max absolute difference: 3
E           Max relative difference: 0.02678571
E            x: array([7385,  115])
E            y: array([7388,  112])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_geo_image" name="test_set_outline_pixel_for_shape" time="0.004" /><testcase classname="test.test_geo_image" name="test_normalize" time="0.001" /><testcase classname="test.test_geo_image" name="test_normalize_with_excludes" time="0.002" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette" time="0.001" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette_force_excludes" time="0.001" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette_with_excludes" time="0.001" /><testcase classname="test.test_geo_image" name="test_draw_state" time="0.440"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 2 / 2 (100%)&#10;Max absolute difference: 2&#10;Max relative difference: 0.00339559&#10; x: array([11234304,      591])&#10; y: array([11234306,      589])">proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f0ae79fe1d0&gt;

    def test_draw_state(proj):
        data = numpy.zeros((proj.width, proj.height))
        geo_image = GeoImage.from_data_grid(proj, data)
        geo_image.draw_state('Rhode Island', color=(255, 0, 0))
    
        values, counts = numpy.unique(geo_image.rgb_array, return_counts=True)
        numpy.testing.assert_array_equal(values, [0, 255])
&gt;       numpy.testing.assert_array_equal(counts, [11234306, 589])

test/test_geo_image.py:324: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, array([11234304,      591]), [11234306, 589])
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 2 / 2 (100%)
E           Max absolute difference: 2
E           Max relative difference: 0.00339559
E            x: array([11234304,      591])
E            y: array([11234306,      589])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_geo_image" name="test_add_one_state" time="0.287"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 1 / 3 (33.3%)&#10;Max absolute difference: 255&#10;Max relative difference: 1.&#10; x: array([0, 0, 0], dtype=uint8)&#10; y: array([255,   0,   0])">proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f0ae7bb1410&gt;

    def test_add_one_state(proj):
        data = numpy.zeros((proj.width, proj.height))
        geo_image = GeoImage.from_data_grid(proj, data)
        geo_image.draw_state_boundary('Florida', color=(255, 0, 0))
    
        # confirm that at least three of the pixel along the state boundary are colored red
        numpy.testing.assert_array_equal(geo_image.rgb_array[1665, 320], [255, 0, 0])
&gt;       numpy.testing.assert_array_equal(geo_image.rgb_array[1850, 122], [255, 0, 0])

test/test_geo_image.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, array([0, 0, 0], dtype=uint8), [255, 0, 0])
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 1 / 3 (33.3%)
E           Max absolute difference: 255
E           Max relative difference: 1.
E            x: array([0, 0, 0], dtype=uint8)
E            y: array([255,   0,   0])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_geo_image" name="test_add_list_of_states" time="0.287"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 1 / 3 (33.3%)&#10;Max absolute difference: 255&#10;Max relative difference: 1.&#10; x: array([0, 0, 0], dtype=uint8)&#10; y: array([255,   0,   0])">proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f0ae7917290&gt;

    def test_add_list_of_states(proj):
        data = numpy.zeros((proj.width, proj.height))
        geo_image = GeoImage.from_data_grid(proj, data)
        geo_image.draw_state_boundary(['Nevada', 'Iowa', 'Delaware'], color=(255, 0, 0))
    
        # confirm that at least three of the pixel along state boundaries are colored red
&gt;       numpy.testing.assert_array_equal(geo_image.rgb_array[609, 678], [255, 0, 0])

test/test_geo_image.py:344: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, array([0, 0, 0], dtype=uint8), [255, 0, 0])
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 1 / 3 (33.3%)
E           Max absolute difference: 255
E           Max relative difference: 1.
E            x: array([0, 0, 0], dtype=uint8)
E            y: array([255,   0,   0])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_geo_image" name="test_color_palette" time="0.002" /><testcase classname="test.test_geo_image" name="test_color_palette_with_anchor" time="0.002" /><testcase classname="test.test_geo_image" name="test_add_all_states" time="2.105"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 3 / 3 (100%)&#10;Max absolute difference: 145&#10;Max relative difference: 0.43137255&#10; x: array([145, 145, 145], dtype=uint8)&#10; y: array([255,   0,   0])">proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f0ae501b550&gt;

    def test_add_all_states(proj):
        current_path = os.path.dirname(os.path.realpath(__file__))
        filename = os.path.join(current_path, 'resources', 'nbm_temp-202211111100-202211121300.nc')
        attrs, data = read_netcdf(filename)
        if attrs['data_order'] == 'latitude,longitude':
            data = numpy.transpose(data)
        geo_image = GeoImage.from_data_grid(proj, data)
        geo_image.draw_state_boundary('All', color=(255, 0, 0))
    
        # confirm that at least three of the pixel along state boundaries are colored red
&gt;       numpy.testing.assert_array_equal(geo_image.rgb_array[1707, 862], [255, 0, 0])

test/test_geo_image.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, array([145, 145, 145], dtype=uint8), [255, 0, 0])
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 3 / 3 (100%)
E           Max absolute difference: 145
E           Max relative difference: 0.43137255
E            x: array([145, 145, 145], dtype=uint8)
E            y: array([255,   0,   0])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_from_proj_grid_spec" time="0.002" /><testcase classname="test.test_grid_proj" name="test_from_proj_grid_spec_with_offset" time="0.001" /><testcase classname="test.test_grid_proj" name="test_get_width" time="0.001" /><testcase classname="test.test_grid_proj" name="test_get_height" time="0.001" /><testcase classname="test.test_grid_proj" name="test_get_shape" time="0.001" /><testcase classname="test.test_grid_proj" name="test_fliplr" time="0.001" /><testcase classname="test.test_grid_proj" name="test_flipud" time="0.001" /><testcase classname="test.test_grid_proj" name="test_flip_both_lr_ud" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_crs_to_pixel_round_half_away" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_crs_to_pixel_round_floor" time="0.002" /><testcase classname="test.test_grid_proj" name="test_map_geo_to_crs" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_pixel_to_crs" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_pixel_to_geo" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_crs_to_geo" time="0.001" /><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_no_rounding" time="0.001" /><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_floor" time="0.001" /><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_round" time="0.001" /><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_round_str" time="0.001" /><testcase classname="test.test_grid_proj" name="test_compound_transformations_stay_consistent" time="0.002" /><testcase classname="test.test_grid_proj" name="test_geo_to_pixel_array" time="0.001" /><testcase classname="test.test_grid_proj" name="test_pixel_to_geo_array" time="0.002" /><testcase classname="test.test_grid_proj" name="test_geo_to_pixel_ndarray" time="0.002" /><testcase classname="test.test_grid_proj" name="test_unbalanced_pixel_or_crs_arrays_fail_to_transform" time="0.001" /><testcase classname="test.test_grid_proj" name="test_invalid_rounding_method_raises_error" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_dict" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_str" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_empty_corr_id" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_originator" time="0.000" /><testcase classname="test.test_json_message" name="test_get_corr_id_uuid" time="0.000" /><testcase classname="test.test_json_message" name="test_get_corr_id_issue_dt" time="0.000" /><testcase classname="test.test_json_message" name="test_json_get_corr_id_failure" time="0.000" /><testcase classname="test.test_json_message" name="test_add_corr_id" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_str" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_uuid" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_issue_dt" time="0.001" /><testcase classname="test.test_log_util" name="test_add_correlation_id_filter" time="0.001" /><testcase classname="test.test_log_util" name="test_set_corr_id" time="0.001" /><testcase classname="test.test_log_util" name="test_set_corr_id_datetime" time="0.001" /><testcase classname="test.test_log_util" name="test_get_default_log_config_with_corr_id" time="0.001" /><testcase classname="test.test_log_util" name="test_get_default_log_config_no_corr_id" time="0.001" /><testcase classname="test.test_netcdf_io" name="test_read_netcdf_global_attrs" time="0.003" /><testcase classname="test.test_netcdf_io" name="test_read_netcdf" time="0.005" /><testcase classname="test.test_netcdf_io" name="test_read_and_write_netcdf" time="0.029" /><testcase classname="test.test_netcdf_io" name="test_read_and_write_netcdf_with_h5nc" time="0.035" /><testcase classname="test.test_path_builder" name="test_from_dir_filename_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_from_path_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_dir_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_filename_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_file_ext" time="0.001" /><testcase classname="test.test_path_builder" name="test_path_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_gets_issue_valid_and_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_fails_without_issue" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_filename" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_path" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_dir" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_filename" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_from_issue_and_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_when_issue_or_lead_failed" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue_from_time_args" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue_returns_none_if_args_empty" time="0.000" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args" time="0.000" /><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_if_args_empty" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args_calculates_based_on_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_lead_from_time_args" time="0.001" /><testcase classname="test.test_path_builder" name="test_calculate_issue_from_valid_and_lead" time="0.001" /><testcase classname="test.test_publish_confirm" name="test_publish_confirm_start_and_stop" time="0.024" /><testcase classname="test.test_publish_confirm" name="test_delivery_confirmation_handles_nack" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_publish_message_success_without_calling_start" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_publish_message_failure_rmq_error" time="0.004" /><testcase classname="test.test_publish_confirm" name="test_on_channel_closed" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_start_with_callback" time="0.102" /><testcase classname="test.test_publish_confirm" name="test_start_without_callback_sleeps" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_wait_for_channel_returns_when_ready" time="0.001" /><testcase classname="test.test_publish_confirm" name="test_calling_start_twice_raises_error" time="0.001" /><testcase classname="test.test_rabbitmq_utils" name="test_connection_params_works" time="0.009" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_connection_does_not_create_new" time="0.007" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_unsupported_connection_type_fails" time="0.001" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_channel_does_not_create_new" time="0.006" /><testcase classname="test.test_rabbitmq_utils" name="test_direct_reply_does_not_try_to_declare_queue" time="0.007" /><testcase classname="test.test_rabbitmq_utils" name="test_default_exchange_does_not_try_to_declare_exchange" time="0.007" /><testcase classname="test.test_utils" name="test_timedelta_minute" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_hour" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_day" time="0.000" /><testcase classname="test.test_utils" name="test_map_dict_init_with_args" time="0.001" /><testcase classname="test.test_utils" name="test_map_dict_init_with_kwargs" time="0.001" /><testcase classname="test.test_utils" name="test_map_dict_set_value" time="0.001" /><testcase classname="test.test_utils" name="test_exec_cmd" time="0.003" /><testcase classname="test.test_utils" name="test_to_iso" time="0.001" /><testcase classname="test.test_utils" name="test_to_compact" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[Everyone is equal-1346529203]" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[You are awesome--1357061130]" time="0.001" /><testcase classname="test.test_utils" name="test_dict_copy_with" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_forward" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_backwards" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_bound" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_switch_time_delta_sign" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[2.5-3]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[-14.5--15]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[3.49999-3]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_float[9.5432-9.5]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_float[-0.8765--0.9]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[100.987654321-100.988]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[-43.21098--43.211]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[3.141592653589793-3.142]" time="0.001" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_simple_criteria_message" time="0.007" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message" time="0.006" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_without_conditions" time="0.006" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_missing_name" time="0.006" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_bad_product_type" time="0.006" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_bad_mapping" time="0.006" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_issue_request" time="0.004" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_issue_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_valid_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_valid_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_lead_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_lead_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_field_request" time="0.004" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_field_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_data_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_data_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_opr_with_single_source_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_opr_with_single_source_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_opr_with_multi_sources_request" time="0.005" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_opr_with_multi_sources_request" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_with_bbox_list" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_bad_bbox_list" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_bad_bbox_obj" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_multi_product" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_without_data" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_bad_data_key" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_bad_data" time="0.003" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message" time="0.009" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_without_results" time="0.005" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_bad_geo_dist" time="0.009" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_missing_metadata" time="0.009" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_missing_type_in_metadata" time="0.009" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_field_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_field_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_field_data_message_missing_region" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_valid_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_valid_data_message" time="0.004" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_valid_data_message_bad_field" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_issue_data_message" time="0.004" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_issue_data_message" time="0.004" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_issue_data_message_bad_valid_string" time="0.004" /><testcase classname="test.test_vectaster" name="test_geographic_point_to_pixel" time="0.002" /><testcase classname="test.test_vectaster" name="test_geographic_linestring_to_pixel" time="0.002" /><testcase classname="test.test_vectaster" name="test_geographic_polygon_to_pixel" time="0.002" /><testcase classname="test.test_vectaster" name="test_geographic_to_pixel" time="0.003" /><testcase classname="test.test_vectaster" name="test_rasterize_point" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_point_from_coord" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_point_without_grid_proj" time="0.001" /><testcase classname="test.test_vectaster" name="test_rasterize_linestring" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_linestring_from_coords" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_polygon__" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_polygon_from_coords" time="0.002" /><testcase classname="test.test_vectaster" name="test_rasterize_polygon_with_hole" time="0.001" /><testcase classname="test.test_vectaster" name="test_rasterize" time="0.002" /></testsuite></testsuites>