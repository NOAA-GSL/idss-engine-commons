<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="26" skipped="0" tests="214" time="5.262" timestamp="2024-01-26T19:55:26.766183" hostname="fv-az735-561"><testcase classname="test.test_aws_utils" name="test_get_path" time="0.002" /><testcase classname="test.test_aws_utils" name="test_aws_ls" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_without_prepend_path" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_ls_returns_empty_array_on_error" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_succeeds" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_retries_with_s3_command_line" time="0.001" /><testcase classname="test.test_aws_utils" name="test_aws_cp_fails" time="0.001" /><testcase classname="test.test_aws_utils" name="test_check_for_succeeds" time="0.001" /><testcase classname="test.test_aws_utils" name="test_check_for_does_not_find_valid" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_issues" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_issues_with_same_start_stop" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_issues_latest_issue_from_today_if_no_args_passed" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_all" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_filter" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_start_and_end_filer" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_same_start_end_filer" time="0.001" /><testcase classname="test.test_aws_utils" name="test_get_valids_with_wildcards" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_as_string_without_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_with_name_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_require_string_key" time="0.001" /><testcase classname="test.test_config" name="test_load_from_dict_require_list_key" time="0.001" /><testcase classname="test.test_config" name="test_load_with_missing_attribute_should_fail" time="0.001" /><testcase classname="test.test_config" name="test_config_str_with_no_files_raises_error" time="0.001" /><testcase classname="test.test_config" name="test_config_list_of_dicts_succeeds" time="0.001" /><testcase classname="test.test_config" name="test_load_with_ignore_missing_attribute" time="0.001" /><testcase classname="test.test_config" name="test_load_from_file" time="0.004" /><testcase classname="test.test_config" name="test_load_from_files_with_out_key" time="0.007" /><testcase classname="test.test_config" name="test_load_from_files_with_key" time="0.007" /><testcase classname="test.test_geo_image" name="test_geo_image_from_data_grid" time="0.012" /><testcase classname="test.test_geo_image" name="test_geo_image_from_data_grid_with_scale" time="0.003" /><testcase classname="test.test_geo_image" name="test_set_pixel" time="0.004" /><testcase classname="test.test_geo_image" name="test_outline_pixel" time="0.003" /><testcase classname="test.test_geo_image" name="test_draw_point" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_line_seg" time="0.024" /><testcase classname="test.test_geo_image" name="test_draw_polygon" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_multi_polygon" time="0.004" /><testcase classname="test.test_geo_image" name="test_draw_geo_polygon" time="0.004" /><testcase classname="test.test_geo_image" name="test_set_outline_pixel_for_shape" time="0.004" /><testcase classname="test.test_geo_image" name="test_normalize" time="0.001" /><testcase classname="test.test_geo_image" name="test_normalize_with_excludes" time="0.002" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette" time="0.001" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette_force_excludes" time="0.001" /><testcase classname="test.test_geo_image" name="test_scale_to_color_palette_with_excludes" time="0.001" /><testcase classname="test.test_geo_image" name="test_draw_state" time="0.449" /><testcase classname="test.test_geo_image" name="test_add_one_state" time="0.299" /><testcase classname="test.test_geo_image" name="test_add_list_of_states" time="0.302" /><testcase classname="test.test_geo_image" name="test_color_palette" time="0.002" /><testcase classname="test.test_geo_image" name="test_color_palette_with_anchor" time="0.002" /><testcase classname="test.test_geo_image" name="test_add_all_states" time="2.334" /><testcase classname="test.test_grid_proj" name="test_from_proj_grid_spec" time="0.004"><failure message="assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)&#10;  At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00&#10;  Full diff:&#10;  - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)&#10;  + (-3271151.6058371724, -263793.7334645616)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca2d2e8d0&gt;

    def test_from_proj_grid_spec(grid_proj: GridProj):
        assert isinstance(grid_proj, GridProj)
    
&gt;       assert (grid_proj._x_offset, grid_proj._y_offset) == approx_tuple(EXAMPLE_CRS[0])
E       assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)
E         At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00
E         Full diff:
E         - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)
E         + (-3271151.6058371724, -263793.7334645616)

test/test_grid_proj.py:70: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_from_proj_grid_spec_with_offset" time="0.002"><failure message="assert (-126.3265786...7681535953287) == (-126.2766 ± ...229 ± 1.9e-05)&#10;  At index 0 diff: -126.3265786600057 != -126.2766 ± 1.3e-04&#10;  Full diff:&#10;  - (-126.2766 ± 1.3e-04, 19.229 ± 1.9e-05)&#10;  + (-126.3265786600057, 19.247681535953287)">def test_from_proj_grid_spec_with_offset():
        proj_with_offset = GridProj.from_proj_grid_spec(PROJ_SPEC_WITH_OFFSET,
                                                        GRID_SPEC_WITHOUT_LOWER_LEFT)
    
        proj_xy = proj_with_offset.map_pixel_to_geo(*EXAMPLE_PIXELS[0])
&gt;       assert proj_xy == approx_tuple(EXAMPLE_LON_LAT[0])
E       assert (-126.3265786...7681535953287) == (-126.2766 ± ...229 ± 1.9e-05)
E         At index 0 diff: -126.3265786600057 != -126.2766 ± 1.3e-04
E         Full diff:
E         - (-126.2766 ± 1.3e-04, 19.229 ± 1.9e-05)
E         + (-126.3265786600057, 19.247681535953287)

test/test_grid_proj.py:86: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_get_width" time="0.001" /><testcase classname="test.test_grid_proj" name="test_get_height" time="0.001" /><testcase classname="test.test_grid_proj" name="test_get_shape" time="0.001" /><testcase classname="test.test_grid_proj" name="test_fliplr" time="0.001" /><testcase classname="test.test_grid_proj" name="test_flipud" time="0.001" /><testcase classname="test.test_grid_proj" name="test_flip_both_lr_ud" time="0.001" /><testcase classname="test.test_grid_proj" name="test_map_crs_to_pixel_round" time="0.002"><failure message="assert (-2, 1) == (0, 0)&#10;  At index 0 diff: -2 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-2, 1)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca3217d90&gt;

    def test_map_crs_to_pixel_round(grid_proj: GridProj):
        for index, crs_xy in enumerate(EXAMPLE_CRS):
            pixel_xy = grid_proj.map_crs_to_pixel(
                *crs_xy,
                rounding=RoundingMethod.ROUND
            )
&gt;           assert pixel_xy == EXAMPLE_PIXELS[index]
E           assert (-2, 1) == (0, 0)
E             At index 0 diff: -2 != 0
E             Full diff:
E             - (0, 0)
E             + (-2, 1)

test/test_grid_proj.py:128: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_map_crs_to_pixel_floor" time="0.002"><failure message="assert (-2 ± 1.0e+00, 1 ± 1.0e+00) == (0, 0)&#10;  At index 0 diff: -2 ± 1.0e+00 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-2 ± 1.0e+00, 1 ± 1.0e+00)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca101d010&gt;

    def test_map_crs_to_pixel_floor(grid_proj: GridProj):
        for index, crs_xy in enumerate(EXAMPLE_CRS):
            i, j = grid_proj.map_crs_to_pixel(
                *crs_xy,
                rounding=RoundingMethod.FLOOR
            )
            # due to math imprecision internal to pyproj.transform(), some test results are a bit
            # unpredictable. E.g. returns 0.999994, which floors to 0, when expected pixel value is 1
&gt;           assert (approx(i, abs=1), approx(j, abs=1)) == EXAMPLE_PIXELS[index]
E           assert (-2 ± 1.0e+00, 1 ± 1.0e+00) == (0, 0)
E             At index 0 diff: -2 ± 1.0e+00 != 0
E             Full diff:
E             - (0, 0)
E             + (-2 ± 1.0e+00, 1 ± 1.0e+00)

test/test_grid_proj.py:139: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_map_geo_to_crs" time="0.002"><failure message="assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)&#10;  At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00&#10;  Full diff:&#10;  - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)&#10;  + (-3271151.6058371724, -263793.7334645616)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca35466d0&gt;

    def test_map_geo_to_crs(grid_proj: GridProj):
        for index, lon_lat in enumerate(EXAMPLE_LON_LAT):
            geo_xy = grid_proj.map_geo_to_crs(*lon_lat)
&gt;           assert geo_xy == approx_tuple(EXAMPLE_CRS[index])
E           assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)
E             At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00
E             Full diff:
E             - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)
E             + (-3271151.6058371724, -263793.7334645616)

test/test_grid_proj.py:145: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_map_pixel_to_crs" time="0.002"><failure message="assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)&#10;  At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00&#10;  Full diff:&#10;  - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)&#10;  + (-3271151.6058371724, -263793.7334645616)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca381c610&gt;

    def test_map_pixel_to_crs(grid_proj: GridProj):
        for index, pixel in enumerate(EXAMPLE_PIXELS):
            geo_x, geo_y = grid_proj.map_pixel_to_crs(*pixel)
&gt;           assert (geo_x, geo_y) == approx_tuple(EXAMPLE_CRS[index])
E           assert (-3271151.605...93.7334645616) == (-3275807.350...285 ± 2.6e-01)
E             At index 0 diff: -3271151.6058371724 != -3275807.350733357 ± 3.3e+00
E             Full diff:
E             - (-3275807.350733357 ± 3.3e+00, -260554.63043505285 ± 2.6e-01)
E             + (-3271151.6058371724, -263793.7334645616)

test/test_grid_proj.py:151: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_map_pixel_to_geo" time="0.002"><failure message="assert (-126.2821043...5112362717893) == (-126.2820964...418 ± 1.9e-05)&#10;  At index 1 diff: 19.25112362717893 != 19.251224896946418 ± 1.9e-05&#10;  Full diff:&#10;  - (-126.28209649530142 ± 1.3e-04, 19.251224896946418 ± 1.9e-05)&#10;  + (-126.28210431967231, 19.25112362717893)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca328fe50&gt;

    def test_map_pixel_to_geo(grid_proj: GridProj):
        for index, pixel in enumerate(EXAMPLE_PIXELS):
            proj_x, proj_y = grid_proj.map_pixel_to_geo(*pixel)
&gt;           assert (proj_x, proj_y) == approx_tuple(EXAMPLE_LON_LAT[index])
E           assert (-126.2821043...5112362717893) == (-126.2820964...418 ± 1.9e-05)
E             At index 1 diff: 19.25112362717893 != 19.251224896946418 ± 1.9e-05
E             Full diff:
E             - (-126.28209649530142 ± 1.3e-04, 19.251224896946418 ± 1.9e-05)
E             + (-126.28210431967231, 19.25112362717893)

test/test_grid_proj.py:157: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_map_crs_to_geo" time="0.002"><failure message="assert (-126.3265786...7681535953287) == (-126.2766 ± ...229 ± 1.9e-05)&#10;  At index 0 diff: -126.32657866000567 != -126.2766 ± 1.3e-04&#10;  Full diff:&#10;  - (-126.2766 ± 1.3e-04, 19.229 ± 1.9e-05)&#10;  + (-126.32657866000567, 19.247681535953287)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca3547890&gt;

    def test_map_crs_to_geo(grid_proj: GridProj):
        for index, geo in enumerate(EXAMPLE_CRS):
            proj_x, proj_y = grid_proj.map_crs_to_geo(*geo)
&gt;           assert (proj_x, proj_y) == approx_tuple(EXAMPLE_LON_LAT[index])
E           assert (-126.3265786...7681535953287) == (-126.2766 ± ...229 ± 1.9e-05)
E             At index 0 diff: -126.32657866000567 != -126.2766 ± 1.3e-04
E             Full diff:
E             - (-126.2766 ± 1.3e-04, 19.229 ± 1.9e-05)
E             + (-126.32657866000567, 19.247681535953287)

test/test_grid_proj.py:163: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_no_rounding" time="0.002"><failure message="assert (-1.833185, 1.275387) == (0, 0)&#10;  At index 0 diff: -1.833185 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-1.833185, 1.275387)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca10b38d0&gt;

    def test_crs_to_pixel_no_rounding(grid_proj: GridProj):
        for index, geo in enumerate(EXAMPLE_CRS):
            i, j = grid_proj.map_crs_to_pixel(*geo)
            # round result, which will not be precisely the integer that was passed
&gt;           assert (round_(i, 6), round_(j, 6)) == EXAMPLE_PIXELS[index]
E           assert (-1.833185, 1.275387) == (0, 0)
E             At index 0 diff: -1.833185 != 0
E             Full diff:
E             - (0, 0)
E             + (-1.833185, 1.275387)

test/test_grid_proj.py:170: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_floor" time="0.002"><failure message="assert (-2, 1) == (0, 0)&#10;  At index 0 diff: -2 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-2, 1)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca35474d0&gt;

    def test_crs_to_pixel_floor(grid_proj: GridProj):
        for index, geo in enumerate(EXAMPLE_CRS):
            i, j = grid_proj.map_crs_to_pixel(*geo)
&gt;           assert (round_(i), round_(j)) == EXAMPLE_PIXELS[index]
E           assert (-2, 1) == (0, 0)
E             At index 0 diff: -2 != 0
E             Full diff:
E             - (0, 0)
E             + (-2, 1)

test/test_grid_proj.py:176: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_round" time="0.002"><failure message="assert (-2, 1) == (0, 0)&#10;  At index 0 diff: -2 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-2, 1)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca2cb7490&gt;

    def test_crs_to_pixel_round(grid_proj: GridProj):
        for index, geo in enumerate(EXAMPLE_CRS):
            i, j = grid_proj.map_crs_to_pixel(*geo, rounding=RoundingMethod.ROUND)
&gt;           assert (i, j) == EXAMPLE_PIXELS[index]
E           assert (-2, 1) == (0, 0)
E             At index 0 diff: -2 != 0
E             Full diff:
E             - (0, 0)
E             + (-2, 1)

test/test_grid_proj.py:187: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_crs_to_pixel_round_str" time="0.002"><failure message="assert (-2, 1) == (0, 0)&#10;  At index 0 diff: -2 != 0&#10;  Full diff:&#10;  - (0, 0)&#10;  + (-2, 1)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca3546b50&gt;

    def test_crs_to_pixel_round_str(grid_proj: GridProj):
        i, j = grid_proj.map_crs_to_pixel(*EXAMPLE_CRS[0], rounding='round')
&gt;       assert (i, j) == EXAMPLE_PIXELS[0]
E       assert (-2, 1) == (0, 0)
E         At index 0 diff: -2 != 0
E         Full diff:
E         - (0, 0)
E         + (-2, 1)

test/test_grid_proj.py:192: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_compound_transformations_stay_consistent" time="0.001" /><testcase classname="test.test_grid_proj" name="test_geo_to_pixel_list" time="0.002"><failure message="assert (0, 0, 1996) == (0, 0, 2000)&#10;  At index 2 diff: 1996 != 2000&#10;  Full diff:&#10;  - (0, 0, 2000)&#10;  + (0, 0, 1996)">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca328d010&gt;

    def test_geo_to_pixel_list(grid_proj: GridProj):
        # split example list of tuples into: list of lats and list of lons
        lon_lat_arrays: tuple[list[float]] = tuple(zip(*EXAMPLE_LON_LAT))
    
        # pass full arrays to map_geo_to_pixel
        pixel_arrays = grid_proj.map_geo_to_pixel(*lon_lat_arrays, rounding=RoundingMethod.ROUND)
    
        expected_xs, expected_ys = list(zip(*EXAMPLE_PIXELS))
&gt;       assert pixel_arrays[0] == expected_xs
E       assert (0, 0, 1996) == (0, 0, 2000)
E         At index 2 diff: 1996 != 2000
E         Full diff:
E         - (0, 0, 2000)
E         + (0, 0, 1996)

test/test_grid_proj.py:229: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_pixel_to_geo_numpy_array" time="0.002"><failure message="AssertionError: &#10;Arrays are not almost equal to 7 decimals&#10;&#10;Mismatched elements: 4 / 6 (66.7%)&#10;Max absolute difference: 0.10626634&#10;Max relative difference: 0.001494&#10; x: array([[-126.2766   , -126.2821043,  -71.0223413],&#10;       [  19.229    ,   19.2511236,   54.0140773]])&#10; y: array([[-126.2766   , -126.2820965,  -71.1286076],&#10;       [  19.229    ,   19.2512249,   54.0910872]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0f231d0&gt;

    def test_pixel_to_geo_numpy_array(grid_proj: GridProj):
        i_array, j_array = list(zip(*EXAMPLE_PIXELS))
    
        # pass full numpy arrays to map_pixel_to_geo
        i_numpy_array = np.array(i_array)
        j_numpy_array = np.array(j_array)
        geo_arrays = grid_proj.map_pixel_to_geo(i_numpy_array, j_numpy_array)
    
        expected_geos = tuple(np.array(values) for values in zip(*EXAMPLE_LON_LAT))
    
        # both x and y coordinate arrays should be numpy arrays
        assert all(isinstance(arr, np.ndarray) for arr in geo_arrays)
&gt;       np.testing.assert_almost_equal(geo_arrays, expected_geos)

test/test_grid_proj.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: in inner
    return func(*args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;function assert_array_almost_equal.&lt;locals&gt;.compare at 0x7f6ca345a660&gt;, (array([-126.2766    , -126.28210432,  -71.0...3, 54.01407727])), (array([-126.2766   , -126.2820965,  -71.1286076]), array([19.229     , 19.2512249 , 54.09108721])))
kwds = {'err_msg': '', 'header': 'Arrays are not almost equal to 7 decimals', 'precision': 7, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not almost equal to 7 decimals
E           
E           Mismatched elements: 4 / 6 (66.7%)
E           Max absolute difference: 0.10626634
E           Max relative difference: 0.001494
E            x: array([[-126.2766   , -126.2821043,  -71.0223413],
E                  [  19.229    ,   19.2511236,   54.0140773]])
E            y: array([[-126.2766   , -126.2820965,  -71.1286076],
E                  [  19.229    ,   19.2512249,   54.0910872]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_geo_to_pixel_numpy_array" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 2 / 6 (33.3%)&#10;Max absolute difference: 4&#10;Max relative difference: 0.002&#10; x: array([[   0,    0, 1996],&#10;       [   0,    1, 1503]])&#10; y: array([[   0,    0, 2000],&#10;       [   0,    1, 1500]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0bdf890&gt;

    def test_geo_to_pixel_numpy_array(grid_proj: GridProj):
        x_values, y_values = list(zip(*EXAMPLE_LON_LAT))
        pixel_arrays = grid_proj.map_geo_to_pixel(
            np.array(x_values), np.array(y_values), rounding=RoundingMethod.ROUND
        )
    
        expected_arrays = np.array(list(zip(*EXAMPLE_PIXELS)))
    
        # both x and y coordinate arrays returned should be numpy arrays
        assert all(isinstance(arr, np.ndarray) for arr in pixel_arrays)
&gt;       np.testing.assert_array_equal(pixel_arrays, expected_arrays)

test/test_grid_proj.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([   0,    0, 1996]), array([   0,    1, 1503])), array([[   0,    0, 2000],
       [   0,    1, 1500]]))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 2 / 6 (33.3%)
E           Max absolute difference: 4
E           Max relative difference: 0.002
E            x: array([[   0,    0, 1996],
E                  [   0,    1, 1503]])
E            y: array([[   0,    0, 2000],
E                  [   0,    1, 1500]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_grid_proj" name="test_unbalanced_pixel_or_crs_arrays_fail_to_transform" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_dict" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_str" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_empty_corr_id" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_originator" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_uuid" time="0.001" /><testcase classname="test.test_json_message" name="test_get_corr_id_issue_dt" time="0.000" /><testcase classname="test.test_json_message" name="test_json_get_corr_id_failure" time="0.000" /><testcase classname="test.test_json_message" name="test_add_corr_id" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_str" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_uuid" time="0.001" /><testcase classname="test.test_json_message" name="test_add_corr_id_issue_dt" time="0.001" /><testcase classname="test.test_log_util" name="test_add_correlation_id_filter" time="0.001" /><testcase classname="test.test_log_util" name="test_set_corr_id" time="0.001" /><testcase classname="test.test_log_util" name="test_set_corr_id_datetime" time="0.001" /><testcase classname="test.test_log_util" name="test_get_default_log_config_with_corr_id" time="0.001" /><testcase classname="test.test_log_util" name="test_get_default_log_config_no_corr_id" time="0.001" /><testcase classname="test.test_netcdf_io" name="test_read_netcdf_global_attrs" time="0.005"><failure message="AssertionError: assert {'data_key': ...0+00:00', ...} == {'data_key': ...0+00:00', ...}&#10;  Omitting 10 identical items, use -vv to show&#10;  Differing items:&#10;  {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200'} != {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200'}&#10;  Full diff:&#10;    {&#10;     'data_key': 'NBM.AWS.GRIB:CO:TEMP::Fahrenheit::20221111140000.20221111170000',&#10;     'field': 'TEMP',&#10;     'grid_spec': '+dx=2539.703 +dy=2539.703 +w=2345 +h=1597 +lat_ll=19.229 '&#10;                  '+lon_ll=-126.2766',&#10;     'issue_dt': '2022-11-11 14:00:00+00:00',&#10;     'product': 'NBM.AWS.GRIB',&#10;     'proj_name': 'NBM',&#10;  -  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200',&#10;  ?                                                                ^&#10;  +  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200',&#10;  ?                                                                ^&#10;     'region': 'CO',&#10;     'task': 'data_task',&#10;     'units': 'Fahrenheit',&#10;     'valid_dt': '2022-11-11 17:00:00+00:00',&#10;    }">def test_read_netcdf_global_attrs():
        attrs = read_netcdf_global_attrs(EXAMPLE_NETCDF_FILEPATH)
    
        assert len(attrs) == 11
&gt;       assert attrs == EXAMPLE_ATTRIBUTES
E       AssertionError: assert {'data_key': ...0+00:00', ...} == {'data_key': ...0+00:00', ...}
E         Omitting 10 identical items, use -vv to show
E         Differing items:
E         {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200'} != {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200'}
E         Full diff:
E           {
E            'data_key': 'NBM.AWS.GRIB:CO:TEMP::Fahrenheit::20221111140000.20221111170000',
E            'field': 'TEMP',
E            'grid_spec': '+dx=2539.703 +dy=2539.703 +w=2345 +h=1597 +lat_ll=19.229 '
E                         '+lon_ll=-126.2766',
E            'issue_dt': '2022-11-11 14:00:00+00:00',
E            'product': 'NBM.AWS.GRIB',
E            'proj_name': 'NBM',
E         -  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200',
E         ?                                                                ^
E         +  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200',
E         ?                                                                ^
E            'region': 'CO',
E            'task': 'data_task',
E            'units': 'Fahrenheit',
E            'valid_dt': '2022-11-11 17:00:00+00:00',
E           }

test/test_netcdf_io.py:59: AssertionError</failure></testcase><testcase classname="test.test_netcdf_io" name="test_read_netcdf" time="0.008"><failure message="AssertionError: assert {'data_key': ...0+00:00', ...} == {'data_key': ...0+00:00', ...}&#10;  Omitting 10 identical items, use -vv to show&#10;  Differing items:&#10;  {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200'} != {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200'}&#10;  Full diff:&#10;    {&#10;     'data_key': 'NBM.AWS.GRIB:CO:TEMP::Fahrenheit::20221111140000.20221111170000',&#10;     'field': 'TEMP',&#10;     'grid_spec': '+dx=2539.703 +dy=2539.703 +w=2345 +h=1597 +lat_ll=19.229 '&#10;                  '+lon_ll=-126.2766',&#10;     'issue_dt': '2022-11-11 14:00:00+00:00',&#10;     'product': 'NBM.AWS.GRIB',&#10;     'proj_name': 'NBM',&#10;  -  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200',&#10;  ?                                                                ^&#10;  +  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200',&#10;  ?                                                                ^&#10;     'region': 'CO',&#10;     'task': 'data_task',&#10;     'units': 'Fahrenheit',&#10;     'valid_dt': '2022-11-11 17:00:00+00:00',&#10;    }">example_netcdf_data = ({'data_key': 'NBM.AWS.GRIB:CO:TEMP::Fahrenheit::20221111140000.20221111170000', 'field': 'TEMP', 'grid_spec': '+dx=25...259913],
       [38.42599  , 38.42599  , 38.42599  , ...,  2.4259913,  2.4259913,
         2.4259913]], dtype=float32))

    def test_read_netcdf(example_netcdf_data: Tuple[Dict[str, any], ndarray]):
        attrs, grid = example_netcdf_data
    
        assert grid.shape == (1597, 2345)
        x_dimensions, y_dimensions = grid.shape
    
        assert grid[0][0] == approx(72.98599)
        assert grid[round(x_dimensions / 2)][round(y_dimensions / 2)] == approx(12.505991)
        assert grid[x_dimensions - 1][y_dimensions - 1] == approx(2.4259913)
    
&gt;       assert attrs == EXAMPLE_ATTRIBUTES
E       AssertionError: assert {'data_key': ...0+00:00', ...} == {'data_key': ...0+00:00', ...}
E         Omitting 10 identical items, use -vv to show
E         Differing items:
E         {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200'} != {'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200'}
E         Full diff:
E           {
E            'data_key': 'NBM.AWS.GRIB:CO:TEMP::Fahrenheit::20221111140000.20221111170000',
E            'field': 'TEMP',
E            'grid_spec': '+dx=2539.703 +dy=2539.703 +w=2345 +h=1597 +lat_ll=19.229 '
E                         '+lon_ll=-126.2766',
E            'issue_dt': '2022-11-11 14:00:00+00:00',
E            'product': 'NBM.AWS.GRIB',
E            'proj_name': 'NBM',
E         -  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +a=6371200',
E         ?                                                                ^
E         +  'proj_spec': '+proj=lcc +lat_0=25.0 +lon_0=-95.0 +lat_1=25.0 +r=6371200',
E         ?                                                                ^
E            'region': 'CO',
E            'task': 'data_task',
E            'units': 'Fahrenheit',
E            'valid_dt': '2022-11-11 17:00:00+00:00',
E           }

test/test_netcdf_io.py:72: AssertionError</failure></testcase><testcase classname="test.test_netcdf_io" name="test_read_and_write_netcdf" time="0.033" /><testcase classname="test.test_netcdf_io" name="test_read_and_write_netcdf_with_h5nc" time="0.037" /><testcase classname="test.test_path_builder" name="test_from_dir_filename_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_from_path_creates_valid_pathbuilder" time="0.001" /><testcase classname="test.test_path_builder" name="test_dir_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_filename_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_file_ext" time="0.001" /><testcase classname="test.test_path_builder" name="test_path_fmt" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_gets_issue_valid_and_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_dir_fails_without_issue" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_filename" time="0.001" /><testcase classname="test.test_path_builder" name="test_build_path" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_dir" time="0.001" /><testcase classname="test.test_path_builder" name="test_parse_filename" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_from_issue_and_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_when_issue_or_lead_failed" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue_from_time_args" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_issue_returns_none_if_args_empty" time="0.000" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args" time="0.000" /><testcase classname="test.test_path_builder" name="test_get_valid_returns_none_if_args_empty" time="0.000" /><testcase classname="test.test_path_builder" name="test_get_valid_from_time_args_calculates_based_on_lead" time="0.001" /><testcase classname="test.test_path_builder" name="test_get_lead_from_time_args" time="0.001" /><testcase classname="test.test_path_builder" name="test_calculate_issue_from_valid_and_lead" time="0.001" /><testcase classname="test.test_publish_confirm" name="test_publish_confirm_start_and_stop" time="0.015" /><testcase classname="test.test_publish_confirm" name="test_delivery_confirmation_handles_nack" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_publish_message_success_without_calling_start" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_publish_message_failure_rmq_error" time="0.004" /><testcase classname="test.test_publish_confirm" name="test_on_channel_closed" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_start_with_callback" time="0.102" /><testcase classname="test.test_publish_confirm" name="test_start_without_callback_sleeps" time="0.002" /><testcase classname="test.test_publish_confirm" name="test_wait_for_channel_returns_when_ready" time="0.001" /><testcase classname="test.test_publish_confirm" name="test_calling_start_twice_raises_error" time="0.001" /><testcase classname="test.test_rabbitmq_utils" name="test_connection_params_works" time="0.009" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_connection_does_not_create_new" time="0.007" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_unsupported_connection_type_fails" time="0.001" /><testcase classname="test.test_rabbitmq_utils" name="test_passing_channel_does_not_create_new" time="0.006" /><testcase classname="test.test_rabbitmq_utils" name="test_direct_reply_does_not_try_to_declare_queue" time="0.007" /><testcase classname="test.test_rabbitmq_utils" name="test_default_exchange_does_not_try_to_declare_exchange" time="0.007" /><testcase classname="test.test_utils" name="test_timedelta_minute" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_hour" time="0.001" /><testcase classname="test.test_utils" name="test_timedelta_day" time="0.001" /><testcase classname="test.test_utils" name="test_map_dict_init_with_args" time="0.001" /><testcase classname="test.test_utils" name="test_map_dict_init_with_kwargs" time="0.001" /><testcase classname="test.test_utils" name="test_map_dict_set_value" time="0.001" /><testcase classname="test.test_utils" name="test_exec_cmd" time="0.003" /><testcase classname="test.test_utils" name="test_to_iso" time="0.001" /><testcase classname="test.test_utils" name="test_to_compact" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[Everyone is equal-1346529203]" time="0.001" /><testcase classname="test.test_utils" name="test_hash_code[You are awesome--1357061130]" time="0.001" /><testcase classname="test.test_utils" name="test_dict_copy_with" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_forward" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_backwards" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_bound" time="0.001" /><testcase classname="test.test_utils" name="test_datetime_gen_switch_time_delta_sign" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[2.5-3]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[-14.5--15]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_int[3.49999-3]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_float[9.5432-9.5]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_float[-0.8765--0.9]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[100.987654321-100.988]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[-43.21098--43.211]" time="0.001" /><testcase classname="test.test_utils" name="test_round_half_away_with_precision[3.141592653589793-3.142]" time="0.001" /><testcase classname="test.test_utils" name="test_invalid_rounding_method_raises_error" time="0.001" /><testcase classname="test.test_utils" name="test_is_valid_uuid_success" time="0.001" /><testcase classname="test.test_utils" name="test_is_valid_uuid_failure" time="0.001" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_simple_criteria_message" time="0.006" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message" time="0.004" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_without_conditions" time="0.004" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_missing_name" time="0.003" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_bad_product_type" time="0.004" /><testcase classname="test.test_validate_criteria_schema" name="test_validate_criteria_message_with_bad_mapping" time="0.004" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_issue_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_issue_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_valid_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_valid_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_lead_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_lead_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_field_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_field_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_data_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_data_request" time="0.002" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_opr_with_single_source_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_opr_with_single_source_request" time="0.003" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_opr_with_multi_sources_request" time="0.005" /><testcase classname="test.test_validate_das_schema" name="test_validate_das_bad_opr_with_multi_sources_request" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_with_bbox_list" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_bad_bbox_list" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_bad_bbox_obj" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_request_message_multi_product" time="0.002" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message" time="0.004" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_without_data" time="0.002" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_bad_data_key" time="0.003" /><testcase classname="test.test_validate_das_web_schema" name="test_validate_das_web_response_message_bad_data" time="0.003" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message" time="0.006" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_without_results" time="0.004" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_bad_geo_dist" time="0.005" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_missing_metadata" time="0.005" /><testcase classname="test.test_validate_event_port_schema" name="test_validate_event_port_message_with_missing_type_in_metadata" time="0.005" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_field_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_field_data_message" time="0.002" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_field_data_message_missing_region" time="0.002" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_valid_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_valid_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_valid_data_message_bad_field" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_issue_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_missing_issue_data_message" time="0.003" /><testcase classname="test.test_validate_new_data_schema" name="test_validate_new_issue_data_message_bad_valid_string" time="0.003" /><testcase classname="test.test_vectaster" name="test_geographic_point_to_pixel" time="0.002"><failure message="assert &lt;POINT (940.528 781.343)&gt; == &lt;POINT (941.558 778.27)&gt;">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca3581e50&gt;

    def test_geographic_point_to_pixel(grid_proj: GridProj):
        point = from_wkt('POINT (-105 40)')
        pixel_point = from_wkt('POINT (941.5576426719887 778.2701810387533)')
        result = geographic_point_to_pixel(point, grid_proj)
    
&gt;       assert result == pixel_point
E       assert &lt;POINT (940.528 781.343)&gt; == &lt;POINT (941.558 778.27)&gt;

test/test_vectaster.py:46: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_geographic_linestring_to_pixel" time="0.002"><failure message="assert &lt;LINESTRING (1097.724 326.579, 767.38 797.352, 509.396 1309.283)&gt; == &lt;LINESTRING (1099.194 324.546, 768.009 794.317, 509.155 1305.967)&gt;">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0fcc710&gt;

    def test_geographic_linestring_to_pixel(grid_proj: GridProj):
        linestring = from_wkt('LINESTRING (-100 30, -110 40, -120 50)')
        pixel_linestring = from_wkt('LINESTRING (1099.1941683923565 324.546444238068,'
                                    '768.0092501944506 794.3170139903758,'
                                    '509.1550445412777 1305.9671045297775)')
        result = geographic_linestring_to_pixel(linestring, grid_proj)
&gt;       assert result == pixel_linestring
E       assert &lt;LINESTRING (1097.724 326.579, 767.38 797.352, 509.396 1309.283)&gt; == &lt;LINESTRING (1099.194 324.546, 768.009 794.317, 509.155 1305.967)&gt;

test/test_vectaster.py:55: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_geographic_polygon_to_pixel" time="0.002"><failure message="assert &lt;POLYGON ((940.528 781.343, 767.38 797.352, 819.14 1263.254, 975.074 1248.83...&gt; == &lt;POLYGON ((941.558 778.27, 768.009 794.317, 819.724 1259.816, 976.073 1245.3...&gt;">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca07c4550&gt;

    def test_geographic_polygon_to_pixel(grid_proj: GridProj):
        poly = from_wkt('POLYGON ((-105 40, -110 40, -110 50, -105 50, -105 40), '
                        '(-107 42, -107 47, -108 47, -108 42, -107 42))')
        pixel_poly = from_wkt('POLYGON ((941.5576426719887 778.2701810387533,'
                              '768.0092501944506 794.3170139903758,'
                              '819.7238357524881 1259.816223819563,'
                              '976.0731562314586 1245.359671430866,'
                              '941.5576426719887 778.2701810387533),'
                              '(880.1253951755987 874.7112000835223,'
                              '900.7222774204608 1106.8022369109524,'
                              '868.391509125368 1109.7916419444564,'
                              '846.0832806150518 877.8588416022637,'
                              '880.1253951755987 874.7112000835223))')
        result = geographic_polygon_to_pixel(poly, grid_proj)
&gt;       assert result == pixel_poly
E       assert &lt;POLYGON ((940.528 781.343, 767.38 797.352, 819.14 1263.254, 975.074 1248.83...&gt; == &lt;POLYGON ((941.558 778.27, 768.009 794.317, 819.724 1259.816, 976.073 1245.3...&gt;

test/test_vectaster.py:72: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_geographic_to_pixel" time="0.003" /><testcase classname="test.test_vectaster" name="test_rasterize_point" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 2 / 2 (100%)&#10;Max absolute difference: 2&#10;Max relative difference: 0.00576369&#10; x: array([[1079],&#10;       [ 349]])&#10; y: array([[1081],&#10;       [ 347]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0f23b90&gt;

    def test_rasterize_point(grid_proj: GridProj):
        point = 'POINT (-100.5 30.5)'
        pixels = (numpy.array([1081]), numpy.array([347]))
        result = rasterize_point(point, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([1079]), array([349])), (array([1081]), array([347])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 2 / 2 (100%)
E           Max absolute difference: 2
E           Max relative difference: 0.00576369
E            x: array([[1079],
E                  [ 349]])
E            y: array([[1081],
E                  [ 347]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_point_from_coord" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 2 / 2 (100%)&#10;Max absolute difference: 2&#10;Max relative difference: 0.00576369&#10; x: array([[1079],&#10;       [ 349]])&#10; y: array([[1081],&#10;       [ 347]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca33cf590&gt;

    def test_rasterize_point_from_coord(grid_proj: GridProj):
        point = (-100.5, 30.5)
        pixels = (numpy.array([1081]), numpy.array([347]))
        result = rasterize_point(point, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([1079]), array([349])), (array([1081]), array([347])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 2 / 2 (100%)
E           Max absolute difference: 2
E           Max relative difference: 0.00576369
E            x: array([[1079],
E                  [ 349]])
E            y: array([[1081],
E                  [ 347]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_point_without_grid_proj" time="0.001" /><testcase classname="test.test_vectaster" name="test_rasterize_linestring" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 22 / 22 (100%)&#10;Max absolute difference: 2&#10;Max relative difference: 0.00617284&#10; x: array([[1097, 1096, 1096, 1095, 1095, 1094, 1093, 1092, 1092, 1091, 1090],&#10;       [ 326,  327,  328,  329,  330,  331,  330,  329,  328,  327,  326]])&#10; y: array([[1099, 1098, 1097, 1097, 1096, 1095, 1094, 1093, 1093, 1092, 1091],&#10;       [ 324,  325,  326,  327,  328,  329,  328,  327,  326,  325,  324]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0cb5f50&gt;

    def test_rasterize_linestring(grid_proj: GridProj):
        linestring = 'LINESTRING (-100 30, -100.1 30.1, -100.2 30)'
        pixels = (numpy.array([1099, 1098, 1097, 1097, 1096, 1095, 1094, 1093, 1093, 1092, 1091]),
                  numpy.array([324, 325, 326, 327, 328, 329, 328, 327, 326, 325, 324]))
        result = rasterize_linestring(linestring, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([1097, 1096, 1096, 1095, 1095, 1094, 1093, 1092, 1092, 1091, 1090]), array([326, 327, ...097, 1097, 1096, 1095, 1094, 1093, 1093, 1092, 1091]), array([324, 325, 326, 327, 328, 329, 328, 327, 326, 325, 324])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 22 / 22 (100%)
E           Max absolute difference: 2
E           Max relative difference: 0.00617284
E            x: array([[1097, 1096, 1096, 1095, 1095, 1094, 1093, 1092, 1092, 1091, 1090],
E                  [ 326,  327,  328,  329,  330,  331,  330,  329,  328,  327,  326]])
E            y: array([[1099, 1098, 1097, 1097, 1096, 1095, 1094, 1093, 1093, 1092, 1091],
E                  [ 324,  325,  326,  327,  328,  329,  328,  327,  326,  325,  324]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_linestring_from_coords" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 6 / 6 (100%)&#10;Max absolute difference: 2&#10;Max relative difference: 0.00617284&#10; x: array([[1097, 1097, 1096],&#10;       [ 326,  327,  326]])&#10; y: array([[1099, 1098, 1098],&#10;       [ 324,  325,  324]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca3580d50&gt;

    def test_rasterize_linestring_from_coords(grid_proj: GridProj):
        linestring = [(-100, 30), (-100.01, 30.02), (-100.02, 30)]
        pixels = (numpy.array([1099, 1098, 1098]), numpy.array([324, 325, 324]))
        result = rasterize_linestring(linestring, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([1097, 1097, 1096]), array([326, 327, 326])), (array([1099, 1098, 1098]), array([324, 325, 324])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 6 / 6 (100%)
E           Max absolute difference: 2
E           Max relative difference: 0.00617284
E            x: array([[1097, 1097, 1096],
E                  [ 326,  327,  326]])
E            y: array([[1099, 1098, 1098],
E                  [ 324,  325,  324]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_polygon__" time="0.003"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 44 / 44 (100%)&#10;Max absolute difference: 3&#10;Max relative difference: 0.00385604&#10; x: array([[937, 938, 939, 940, 937, 938, 939, 940, 937, 938, 939, 940, 937,&#10;        938, 939, 940, 937, 938, 939, 940, 940, 937],&#10;       [781, 781, 781, 781, 782, 782, 782, 782, 783, 783, 783, 783, 784,&#10;        784, 784, 784, 785, 785, 785, 785, 785, 786]])&#10; y: array([[938, 939, 940, 941, 938, 939, 940, 941, 938, 939, 940, 941, 938,&#10;        939, 940, 941, 938, 939, 940, 941, 941, 938],&#10;       [778, 778, 778, 778, 779, 779, 779, 779, 780, 780, 780, 780, 781,&#10;        781, 781, 781, 782, 782, 782, 782, 782, 783]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca33be310&gt;

    def test_rasterize_polygon__(grid_proj: GridProj):
        poly = 'POLYGON ((-105 40, -105.1 40, -105.1 40.1, -105 40.1, -105 40))'
        pixels = (numpy.array([938, 939, 940, 941, 938, 939, 940, 941, 938, 939, 940,
                               941, 938, 939, 940, 941, 938, 939, 940, 941, 941, 938]),
                  numpy.array([778, 778, 778, 778, 779, 779, 779, 779, 780, 780, 780,
                               780, 781, 781, 781, 781, 782, 782, 782, 782, 782, 783]))
        result = rasterize_polygon(poly, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([937, 938, 939, 940, 937, 938, 939, 940, 937, 938, 939, 940, 937,
       938, 939, 940...778, 778, 778, 778, 779, 779, 779, 779, 780, 780, 780, 780, 781,
       781, 781, 781, 782, 782, 782, 782, 782, 783])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 44 / 44 (100%)
E           Max absolute difference: 3
E           Max relative difference: 0.00385604
E            x: array([[937, 938, 939, 940, 937, 938, 939, 940, 937, 938, 939, 940, 937,
E                   938, 939, 940, 937, 938, 939, 940, 940, 937],
E                  [781, 781, 781, 781, 782, 782, 782, 782, 783, 783, 783, 783, 784,
E                   784, 784, 784, 785, 785, 785, 785, 785, 786]])
E            y: array([[938, 939, 940, 941, 938, 939, 940, 941, 938, 939, 940, 941, 938,
E                   939, 940, 941, 938, 939, 940, 941, 941, 938],
E                  [778, 778, 778, 778, 779, 779, 779, 779, 780, 780, 780, 780, 781,
E                   781, 781, 781, 782, 782, 782, 782, 782, 783]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_polygon_from_coords" time="0.002"><failure message="AssertionError: &#10;Arrays are not equal&#10;&#10;Mismatched elements: 26 / 26 (100%)&#10;Max absolute difference: 3&#10;Max relative difference: 0.00385604&#10; x: array([[937, 938, 939, 940, 937, 938, 939, 937, 938, 937, 938, 937, 937],&#10;       [781, 781, 781, 781, 782, 782, 782, 783, 783, 784, 784, 785, 786]])&#10; y: array([[938, 939, 940, 941, 938, 939, 940, 938, 939, 938, 939, 938, 938],&#10;       [778, 778, 778, 778, 779, 779, 779, 780, 780, 781, 781, 782, 783]])">grid_proj = &lt;idsse.common.grid_proj.GridProj object at 0x7f6ca0c075d0&gt;

    def test_rasterize_polygon_from_coords(grid_proj: GridProj):
        poly = (((-105, 40), (-105.1, 40), (-105.1, 40.1), (-105, 40)),)
        pixels = (numpy.array([938, 939, 940, 941, 938, 939, 940, 938, 939, 938, 939, 938, 938]),
                  numpy.array([778, 778, 778, 778, 779, 779, 779, 780, 780, 781, 781, 782, 783]))
        result = rasterize_polygon(poly, grid_proj)
&gt;       numpy.testing.assert_array_equal(result, pixels)

test/test_vectaster.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;built-in function eq&gt;, (array([937, 938, 939, 940, 937, 938, 939, 937, 938, 937, 938, 937, 937]), array([781, 781, 7...8, 939, 940, 938, 939, 938, 939, 938, 938]), array([778, 778, 778, 778, 779, 779, 779, 780, 780, 781, 781, 782, 783])))
kwds = {'err_msg': '', 'header': 'Arrays are not equal', 'strict': False, 'verbose': True}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
&gt;           return func(*args, **kwds)
E           AssertionError: 
E           Arrays are not equal
E           
E           Mismatched elements: 26 / 26 (100%)
E           Max absolute difference: 3
E           Max relative difference: 0.00385604
E            x: array([[937, 938, 939, 940, 937, 938, 939, 937, 938, 937, 938, 937, 937],
E                  [781, 781, 781, 781, 782, 782, 782, 783, 783, 784, 784, 785, 786]])
E            y: array([[938, 939, 940, 941, 938, 939, 940, 938, 939, 938, 939, 938, 938],
E                  [778, 778, 778, 778, 779, 779, 779, 780, 780, 781, 781, 782, 783]])

/opt/hostedtoolcache/Python/3.11.7/x64/lib/python3.11/contextlib.py:81: AssertionError</failure></testcase><testcase classname="test.test_vectaster" name="test_rasterize_polygon_with_hole" time="0.001" /><testcase classname="test.test_vectaster" name="test_rasterize" time="0.003" /></testsuite></testsuites>